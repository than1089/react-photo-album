{"version":3,"sources":["features/photos/Photos.module.css","api/photoAPI.ts","features/photos/uploadSlide.ts","features/photos/UploadModal.tsx","features/photos/photosSlide.ts","features/photos/Photos.tsx","features/healthcheck/healcheckSlide.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/photos/UploadModal.module.css"],"names":["module","exports","backendURL","process","REACT_APP_BACKEND_URL","a","axios","get","data","skip","limit","post","selectedIds","photosById","deletingPhotos","Object","values","filter","photo","indexOf","id","forEach","album","push","name","body","entries","map","item","documents","join","fetch","method","headers","JSON","stringify","response","photos","dispatch","formData","FormData","file","append","put","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","setUploadPercentage","healCheck","getPhotos","uploadPhotos","deletePhotos","uploadSlide","createSlice","initialState","percentage","isUploading","error","reducers","uploadPhotosStart","state","uploadPhotosSuccess","uploadPhotosFailure","payload","actions","activeStyle","borderColor","acceptStyle","rejectStyle","albums","UploadModal","props","useDispatch","useState","files","setFiles","setAlbum","uploaded","setUploaded","upload","useSelector","useDropzone","accept","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","useEffect","className","styles","modalOverlay","modalContent","modalHeader","href","onClick","onClose","dropzone","length","index","key","newFiles","slice","splice","removeFile","progress","width","modalFooter","onChange","e","target","value","photoAPI","toString","button","disabled","src","alt","startLoading","isLoading","loadingFailed","action","photosSlide","size","isLastPage","getPhottosStart","deletePhotosStart","getPhotosSuccess","count","keys","resetPhotos","deletePhotosSuccess","getPhottosFailure","deletePhotosFailure","setPageSize","selectPhoto","fetchPhotos","offset","reset","photosResult","Photos","photoId","selectedPhoto","photoHolder","raw","photoName","healCheckSlide","ok","isChecking","healthCheckStart","healthCheckSuccess","healthCheckFailure","App","showModal","setShowModal","message","health","window","confirm","Number","title","store","configureStore","reducer","photosReducer","uploadReducer","healthReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,YAAc,4BAA4B,UAAY,0BAA0B,cAAgB,gC,uPCG1KC,EAAaC,qIAAYC,uBAAyB,yC,4CAiBxD,8BAAAC,EAAA,sEACyBC,IAAMC,IAAN,UAAaL,EAAb,YADzB,uBACUM,EADV,EACUA,KADV,kBAESA,GAFT,4C,kEAKA,8CAAAH,EAAA,6DAAyBI,EAAzB,+BAAgC,EAAGC,EAAnC,+BAA2C,EAA3C,SACyBJ,IAAMK,KAAN,UAAcT,EAAd,gBAAwC,CAACO,OAAMC,UADxE,uBACUF,EADV,EACUA,KADV,kBAESA,GAFT,4C,kEAKA,WAA4BI,EAAuBC,GAAnD,qBAAAR,EAAA,6DACQS,EAAiBC,OAAOC,OAAOH,GAAYI,QAAO,SAAAC,GAAK,OAAuC,IAAnCN,EAAYO,QAAQD,EAAME,OACrFZ,EAAgC,GACtCM,EAAeO,SAAQ,SAAAH,GAChBV,EAAKU,EAAMI,OAGdd,EAAKU,EAAMI,OAAOC,KAAKL,EAAMM,MAF7BhB,EAAKU,EAAMI,OAAS,CAACJ,EAAMM,SAKzBC,EAAOV,OAAOW,QAAQlB,GAAMmB,KAAI,SAAAC,GAAI,MAAK,CAACN,MAAOM,EAAK,GAAIC,UAAWD,EAAK,GAAGE,KAAK,UAV1F,SAWyBC,MAAM,GAAD,OAAI7B,EAAJ,WAAyB,CACnD8B,OAAQ,SACRC,QAAS,CACP,eAAgB,oBAElBR,KAAMS,KAAKC,UAAUV,KAhBzB,cAWQW,EAXR,yBAkBSA,GAlBT,4C,kEAqBA,WAA4BC,EAAgBf,EAAegB,GAA3D,eAAAjC,EAAA,6DACQkC,EAAW,IAAIC,SACrBH,EAAOhB,SAAQ,SAAAoB,GACbF,EAASG,OAAO,YAAaD,MAE/BF,EAASG,OAAO,QAASpB,GAL3B,SAMehB,IAAMqC,IAAN,UAAazC,EAAb,WAAkCqC,EAAU,CACvDK,iBAAkB,SAACC,GACjB,IAAMC,EAAmBC,KAAKC,MAA8B,IAAvBH,EAAcI,OAAgBJ,EAAcK,OACjFZ,EAASa,EAAoBL,OATnC,oF,sBAce,OAACM,U,2CAAWC,U,2CAAWC,a,gDAAcC,a,+CClDvCC,EAAcC,YAAY,CACrCjC,KAAM,SACNkC,aARgC,CAChCC,WAAY,EACZC,aAAa,EACbC,MAAO,MAMPC,SAAU,CACRC,kBAAmB,SAACC,GAClBA,EAAMJ,aAAc,GAEtBK,oBAAqB,SAACD,GACpBA,EAAMJ,aAAc,GAEtBM,oBAAqB,SAACF,EAAD,GAAgD,IAAtCG,EAAqC,EAArCA,QAC7BH,EAAMJ,aAAc,EACpBI,EAAMH,MAAQM,GAEhBhB,oBAAqB,SAACa,EAAD,GAAgD,IAAtCG,EAAqC,EAArCA,QAC7BH,EAAML,WAAaQ,M,EAUrBX,EAAYY,QAJdL,E,EAAAA,kBACAE,E,EAAAA,oBACAC,E,EAAAA,oBACAf,E,EAAAA,oBAaaK,IAAf,Q,gBC9CMa,EAAc,CAClBC,YAAa,WAGTC,EAAc,CAClBD,YAAa,WAGTE,EAAc,CAClBF,YAAa,WAOTG,EAAS,CAAC,SAAU,WAAY,OAAQ,SAAU,SAEjD,SAASC,EAAYC,GAC1B,IAAMrC,EAAWsC,cADuB,EAEdC,mBAAiB,IAFH,mBAEjCC,EAFiC,KAE1BC,EAF0B,OAGdF,mBAAS,IAHK,mBAGjCvD,EAHiC,KAG1B0D,EAH0B,OAIRH,oBAAS,GAJD,mBAIjCI,EAJiC,KAIvBC,EAJuB,KAMlCC,EAASC,aAAY,SAACpB,GAAD,OAAsBA,EAAMmB,UANf,EAiBpCE,YAAY,CAACC,OAAQ,UAAWC,OATrB,SAACC,GACdT,EAASS,MAGTC,EAZsC,EAYtCA,aACAC,EAbsC,EAatCA,cACAC,EAdsC,EActCA,aACAC,EAfsC,EAetCA,aACAC,EAhBsC,EAgBtCA,aAGIC,EAAQC,mBAAQ,iCAChBJ,EAAetB,EAAc,GADb,GAEhBuB,EAAerB,EAAc,GAFb,GAGhBsB,EAAerB,EAAc,MAC/B,CACFmB,EACAE,EACAD,IAgBF,OAPAI,qBAAU,WACHb,EAAOvB,aAAqC,MAAtBuB,EAAOxB,aAChCuB,GAAY,GACZH,EAAS,OAEV,CAACI,EAAOvB,YAAauB,EAAOxB,aAG7B,6BACE,yBAAKsC,UAAWC,IAAOC,eACvB,yBAAKF,UAAWC,IAAOE,cACrB,yBAAKH,UAAWC,IAAOG,aACrB,6CACA,uBAAGC,KAAK,KAAKC,QAAS5B,EAAM6B,SAA5B,MAEF,yCAASf,EAAa,CAACK,UAAvB,CAAgCG,UAAWC,IAAOO,WAChD,0BAAWf,KACX,uFAEF,8BACIZ,EAAM4B,SAAWzB,GACjB,uBAAGgB,UAAU,eAAb,yBAEAnB,EAAM4B,QAAUzB,GAChB,uBAAGgB,UAAU,eAAb,4BAECnB,EAAM4B,QACP,4BACG5B,EAAMnD,KAAI,SAACc,EAAMkE,GAAP,OACT,wBAAIC,IAAKD,GACP,8BAAOlE,EAAKjB,MACZ,uBAAG8E,KAAK,KAAKC,QAAS,kBArCnB,SAACI,GAClB,IAAME,EAAW/B,EAAMgC,QACvBD,EAASE,OAAOJ,EAAO,GACvB5B,EAAS8B,GAkCiCG,CAAWL,IAAQV,UAAWC,IAAOc,YAAjE,UAKP7B,EAAOvB,aACN,yBAAKqC,UAAWC,IAAOe,UACrB,yBAAKhB,UAAWC,IAAOvC,WAAYmC,MAAO,CAACoB,MAAM,GAAD,OAAK/B,EAAOxB,WAAZ,UAItD,yBAAKsC,UAAWC,IAAOiB,aACrB,4BAAQ3F,KAAK,QAAQ4F,SAAU,SAACC,GAAD,OAAOrC,EAASqC,EAAEC,OAAOC,SACtD,4BAAQA,MAAM,IAAd,gBACC9C,EAAO9C,KAAI,SAAAL,GAAK,OACf,4BAAQiG,MAAOjG,EAAOsF,IAAKtF,GAAQA,OAGvC,4BAAQiF,QAAS,kBAAMjE,EDlEL,SAACD,EAAgBf,GAAjB,8CAA6C,WAAMgB,GAAN,SAAAjC,EAAA,sEAErEiC,EAASyB,KAF4D,SAG/DyD,EAASlE,aAAajB,EAAQf,EAAOgB,GAH0B,OAIrEA,EAAS2B,KAJ4D,gDAMrE3B,EAAS4B,EAAoB,KAAIuD,aANoC,yDAA7C,sDCkEcnE,CAAawB,EAAOxD,KAClD2E,UAAWC,IAAOwB,OAAQC,UAAWrG,IAAUwD,EAAM4B,QACrD,yBAAKkB,IAAKzH,qCAA6C+G,MAAM,KAAKW,IAAI,gBAFxE,cCrFV,SAASC,EAAa9D,GACpBA,EAAM+D,WAAY,EAGpB,SAASC,EAAchE,EAAoBiE,GACzCjE,EAAM+D,WAAY,EAClB/D,EAAMH,MAAQoE,EAAO9D,QAGhB,IAAM+D,EAAczE,YAAY,CACrCjC,KAAM,SACNkC,aArBgC,CAChC7C,WAAY,GACZqC,MAAO,EACPiF,KAAM,GACNvH,YAAa,GACbwH,YAAY,EACZL,WAAW,EACXlE,MAAO,MAePC,SAAU,CACRuE,gBAAiBP,EACjB/D,kBAAmB+D,EACnBQ,kBAAmBR,EACnBS,iBAAkB,SAACvE,EAAD,GAAsE,IAA/CG,EAA8C,EAA9CA,QAC/BtC,EAA4BsC,EAA5BtC,UAAW2G,EAAiBrE,EAAjBqE,MAAO9H,EAAUyD,EAAVzD,MAC1BsD,EAAM+D,WAAY,EAClB/D,EAAMH,MAAQ,KACdhC,EAAUR,SAAQ,SAAAH,GAChB8C,EAAMnD,WAAWK,EAAME,IAAMF,KAE/B8C,EAAMd,MAAQnC,OAAO0H,KAAKzE,EAAMnD,YAAY6F,OAC5C1C,EAAMoE,WAAaI,EAAQ9H,GAE7BgI,YAAa,SAAC1E,GACZA,EAAMnD,WAAa,IAErB8H,oBAAqB,SAAC3E,EAAD,GAA8D,EAAvCG,QAClC9C,SAAQ,SAAAD,GAAE,cAAW4C,EAAMnD,WAAWO,MAC9C4C,EAAMpD,YAAc,GACpBoD,EAAM+D,WAAY,GAEpBa,kBAAmBZ,EACnB9D,oBAAqB8D,EACrBa,oBAAqBb,EACrBc,YAAa,SAAC9E,EAAD,GAA6D,IAAtCG,EAAqC,EAArCA,QAClCH,EAAMmE,KAAOhE,GAEf4E,YAAa,SAAC/E,EAAD,GAA6D,IAAtCG,EAAqC,EAArCA,QAC5BwC,EAAQ3C,EAAMpD,YAAYO,QAAQgD,IACzB,IAAXwC,EACF3C,EAAMpD,YAAYW,KAAK4C,GAEvBH,EAAMpD,YAAYmG,OAAOJ,EAAO,O,EAkBpCuB,EAAY9D,QAXdiE,E,EAAAA,gBAEAC,G,EADAvE,kB,EACAuE,mBACAC,E,EAAAA,iBACAI,E,EAAAA,oBACAC,E,EAAAA,kBAEAC,G,EADA3E,oB,EACA2E,qBACAC,E,EAAAA,YACAJ,E,EAAAA,YACAK,E,EAAAA,YAGWC,EAAc,SAACC,EAAgBvI,GAAjB,IAAgCwI,EAAhC,sGAA4D,WAAM5G,GAAN,eAAAjC,EAAA,sEAEnFiC,EAAS+F,KAF0E,SAGxDb,EAASnE,UAAU4F,EAAQvI,GAH6B,OAG7EyI,EAH6E,OAI/ED,GACF5G,EAASoG,KAEXpG,EAASiG,EAAiBY,IAPyD,gDASnF7G,EAASsG,EAAkB,KAAInB,aAToD,yDAA5D,uDA0BZS,IAAf,Q,iBC5GO,SAASkB,KACd,IAAM9G,EAAWsC,cACXvC,EAAS+C,aAAY,SAACpB,GAAD,OAAqBA,EAAM3B,UAEtD2D,qBAAU,WACR1D,EAAS0G,EAAY,EAAG3G,EAAO8F,MAAM,MACpC,CAAC7F,EAAUD,EAAO8F,OAarB,OACE,yBAAKlC,UAAU,aACb,yBAAKA,UAAWC,IAAO7D,QACpBtB,OAAOC,OAAOqB,EAAOxB,YAAYc,KAAI,SAAAT,GAAK,OACzC,yBAAK0F,IAAK1F,EAAME,GACd6E,UAAWC,IAAOhF,OAZFmI,EAY2BnI,EAAME,IAXZ,IAAzCiB,EAAOzB,YAAYO,QAAQkI,GACvB,IAAN,OAAWnD,IAAOoD,eAEb,IASC/C,QAAS,kBAAMjE,EAASyG,EAAY7H,EAAME,OAC1C,yBAAK6E,UAAWC,IAAOqD,aACrB,yBAAK3B,IAAK1G,EAAMsI,IAAK3B,IAAK3G,EAAMM,QAElC,yBAAKyE,UAAWC,IAAOuD,WAAW,8BAAOvI,EAAMM,OAC/C,+BAAQN,EAAMI,QAlBC,IAAC+H,OAsBpBhH,EAAO+F,aAAe/F,EAAO0F,WAC7B,yBAAK9B,UAAU,yBACb,4BAAQA,UAAU,gBAAgBM,QA5BzB,WACfjE,EAAS0G,EAAY3G,EAAOa,MAAOb,EAAO8F,MAAM,MA2B1C,cAGH9F,EAAO0F,WACN,yBAAK9B,UAAU,eACb,yBAAK2B,IAAKzH,iCAAyC+G,MAAM,KAAKW,IAAI,cCvC5E,IAKa6B,GAAiBjG,YAAY,CACxCjC,KAAM,SACNkC,aAPgC,CAChCiG,IAAI,EACJC,YAAY,GAMZ9F,SAAU,CACR+F,iBAAkB,SAAC7F,GACjBA,EAAM4F,YAAa,GAErBE,mBAAoB,SAAC9F,GACnBA,EAAM4F,YAAa,EACnB5F,EAAM2F,IAAK,GAEbI,mBAAoB,SAAC/F,EAAoBiE,GACvCjE,EAAM4F,YAAa,EACnB5F,EAAM2F,IAAK,M,GASbD,GAAetF,QAHjByF,G,GAAAA,iBACAC,G,GAAAA,mBACAC,G,GAAAA,mBAiBaL,MAAf,QCqBeM,OAhEf,WAAgB,IAAD,EACqBnF,oBAAS,GAD9B,mBACNoF,EADM,KACKC,EADL,KAGP5H,EAAWsC,cAEjBoB,qBAAU,WACR1D,EDuBqB,uCAAgB,WAAMA,GAAN,eAAAjC,EAAA,sEAErCiC,EAASuH,MAF4B,SAGfrC,EAASpE,YAHM,OAG/B+G,EAH+B,OAKnC7H,EADc,OAAZ6H,EACOL,KAEAC,GAAmBI,IAPO,gDAUrC7H,EAASyH,GAAmB,KAAItC,aAVK,yDAAhB,yDCtBpB,CAACnF,IAEJ,IAAMD,EAAS+C,aAAY,SAACpB,GAAD,OAAsBA,EAAM3B,UACjD+H,EAAShF,aAAY,SAACpB,GAAD,OAAsBA,EAAMoG,UAavD,OACE,yBAAKnE,UAAU,OACZmE,EAAOT,IACN,oCACA,4BAAQ1D,UAAU,cAChB,sCACA,yBAAKA,UAAU,aACV5D,EAAOzB,YAAY8F,QACpB,oCACE,uBAAGJ,KAAK,KAAKC,QAhBA,WACzB,IH6EA3F,EACAC,EG9EWwJ,OAAOC,QAAQ,yDAExBhI,GH2EF1B,EG3EwByB,EAAOzB,YH4E/BC,EG5E4CwB,EAAOxB,WH0E3B,uCAGX,WAAMyB,GAAN,SAAAjC,EAAA,sEAEbiC,EAASgG,KAFI,SAGPd,EAASjE,aAAa3C,EAAaC,GAH5B,OAIbyB,EAASqG,EAAoB/H,IAJhB,gDAMb0B,EAASuG,EAAoB,KAAIpB,aANpB,yDAHW,0DG5DV,0CAAgBpF,EAAOzB,YAAY8F,OAAnC,YAEF,oCAGJ,uBAAGJ,KAAK,KAAKC,QAAS,kBAAM2D,GAAa,KACvC,yBAAKtC,IAAKzH,qCAA6C+G,MAAM,KAAKW,IAAI,YAExE,mCACA,4BAAQT,SA9BK,SAACC,GACtB/E,EAASwG,EAAYyB,OAAOlD,EAAEC,OAAOC,UA6BKA,MAAOlF,EAAO8F,KAAMqC,MAAM,aAC1D,4BAAQjD,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,OAAd,UAIL0C,GACC,kBAACvF,EAAD,CAAa8B,QAAS,kBAAM0D,GAAa,MAE3C,kBAACd,GAAD,QAGAgB,EAAOT,IACP,wBAAI1D,UAAU,eAAd,mDC9DKwE,GAAQC,YAAe,CAClCC,QAAS,CACPtI,OAAQuI,EACRzF,OAAQ0F,EACRT,OAAQU,MCGQC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUZ,MAAOA,IACf,kBAAC,GAAD,QAGJa,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjI,GACLkI,QAAQlI,MAAMA,EAAMsG,a,kBE7I5BnK,EAAOC,QAAU,CAAC,aAAe,kCAAkC,aAAe,kCAAkC,YAAc,iCAAiC,YAAc,iCAAiC,SAAW,8BAA8B,OAAS,4BAA4B,WAAa,gCAAgC,SAAW,8BAA8B,WAAa,mC","file":"static/js/main.e949ddc1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photos\":\"Photos_photos__361YJ\",\"photo\":\"Photos_photo__2-z8c\",\"photoHolder\":\"Photos_photoHolder__3t51Y\",\"photoName\":\"Photos_photoName__3bVJy\",\"selectedPhoto\":\"Photos_selectedPhoto__1P1x2\"};","import axios from 'axios';\nimport { setUploadPercentage } from '../features/photos/uploadSlide';\nimport { Dispatch } from 'react';\n\nconst backendURL = process.env.REACT_APP_BACKEND_URL || 'https://tn-album-backend.herokuapp.com';\n\nexport interface Photo {\n  id: string;\n  album: string;\n  name: string;\n  path: string;\n  raw: string;\n}\nexport interface PhotoListResult {\n  message: string;\n  documents: Photo[],\n  count: number;\n  skip: number;\n  limit: number;\n}\n\nasync function healCheck() {\n  const { data } = await axios.get(`${backendURL}/health`);\n  return data;\n}\n\nasync function getPhotos(skip = 0, limit = 5): Promise<PhotoListResult> {\n  const { data } = await axios.post(`${backendURL}/photos/list`, {skip, limit});\n  return data;\n}\n\nasync function deletePhotos(selectedIds: string[], photosById: Record<string, Photo>): Promise<any> {\n  const deletingPhotos = Object.values(photosById).filter(photo => selectedIds.indexOf(photo.id) !== -1);\n  const data:Record<string, string[]> = {};\n  deletingPhotos.forEach(photo => {\n    if (!data[photo.album]) {\n      data[photo.album] = [photo.name];\n    } else {\n      data[photo.album].push(photo.name);\n    }\n  });\n  const body = Object.entries(data).map(item => ({album: item[0], documents: item[1].join(', ')}));\n  const response = await fetch(`${backendURL}/photos`, {\n    method: \"DELETE\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  return response;\n}\n\nasync function uploadPhotos(photos: File[], album: string, dispatch: Dispatch<any>): Promise<any> {\n  const formData = new FormData();\n  photos.forEach(file => {\n    formData.append('documents', file);\n  });\n  formData.append('album', album);\n  return await axios.put(`${backendURL}/photos`, formData, {\n    onUploadProgress: (progressEvent: ProgressEvent) => {\n      const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n      dispatch(setUploadPercentage(percentCompleted));\n    }\n  });\n}\n\nexport default {healCheck, getPhotos, uploadPhotos, deletePhotos};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from '../../app/store';\nimport photoAPI from '../../api/photoAPI';\n\ninterface UploadState {\n  percentage: number;\n  isUploading: boolean;\n  error: string | null;\n}\n\nconst initialState: UploadState = {\n  percentage: 0,\n  isUploading: false,\n  error: null,\n}\n\nexport const uploadSlide = createSlice({\n  name: 'upload',\n  initialState,\n  reducers: {\n    uploadPhotosStart: (state: UploadState) => {\n      state.isUploading = true;\n    },\n    uploadPhotosSuccess: (state: UploadState) => {\n      state.isUploading = false;\n    },\n    uploadPhotosFailure: (state, { payload }: PayloadAction<string>) => {\n      state.isUploading = false;\n      state.error = payload;\n    },\n    setUploadPercentage: (state, { payload }: PayloadAction<number>) => {\n      state.percentage = payload;\n    },\n  },\n});\n\nexport const {\n  uploadPhotosStart,\n  uploadPhotosSuccess,\n  uploadPhotosFailure,\n  setUploadPercentage,\n} = uploadSlide.actions;\n\nexport const uploadPhotos = (photos: File[], album: string): AppThunk => async dispatch => {\n  try {\n    dispatch(uploadPhotosStart());\n    await photoAPI.uploadPhotos(photos, album, dispatch);\n    dispatch(uploadPhotosSuccess());\n  } catch (err) {\n    dispatch(uploadPhotosFailure(err.toString()));\n  }\n}\n\nexport default uploadSlide.reducer;\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uploadPhotos } from './uploadSlide';\nimport styles from './UploadModal.module.css';\nimport { RootState } from '../../app/store';\n\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\n\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\ninterface Props {\n  onClose: () => void\n}\n\nconst albums = ['Travel', 'Personal', 'Food', 'Nature', 'Other'];\n\nexport function UploadModal(props: Props) {\n  const dispatch = useDispatch();\n  const [files, setFiles] = useState<File[]>([]);\n  const [album, setAlbum] = useState('');\n  const [uploaded, setUploaded] = useState(false);\n\n  const upload = useSelector((state: RootState) => state.upload);\n\n  const onDrop = (acceptedFiles: File[]) => {\n    setFiles(acceptedFiles);\n  }\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({accept: 'image/*', onDrop: onDrop});\n\n  const style = useMemo(() => ({\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n    isDragActive,\n    isDragReject,\n    isDragAccept\n  ]);\n\n  const removeFile = (index: number) => {\n    const newFiles = files.slice();\n    newFiles.splice(index, 1);\n    setFiles(newFiles);\n  }\n\n  useEffect(() => {\n    if (!upload.isUploading && upload.percentage === 100) {\n      setUploaded(true);\n      setFiles([]);\n    }\n  }, [upload.isUploading, upload.percentage])\n\n  return (\n    <div>\n      <div className={styles.modalOverlay}></div>\n      <div className={styles.modalContent}>        \n        <div className={styles.modalHeader}>\n          <h3>Upload Photos</h3> \n          <a href=\"#!\" onClick={props.onClose}>X</a>\n        </div>\n        <div {...getRootProps({style})} className={styles.dropzone}>\n          <input {...getInputProps()} />\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        </div>\n        <div>\n          {!files.length && !uploaded &&\n            <p className=\"text-center\">No files selected...</p>\n          }\n          {!files.length && uploaded &&\n            <p className=\"text-center\">Uploaded successfully.</p>\n          }\n          {!!files.length &&\n            <ul>\n              {files.map((file, index) => \n                <li key={index}>\n                  <span>{file.name}</span>\n                  <a href=\"#!\" onClick={() => removeFile(index)} className={styles.removeFile}>X</a>\n                </li>\n              )}\n            </ul>\n          }\n          {upload.isUploading &&\n            <div className={styles.progress}>\n              <div className={styles.percentage} style={{width: `${upload.percentage}%`}}></div>\n            </div>\n          }\n        </div>\n        <div className={styles.modalFooter}>\n          <select name=\"album\" onChange={(e) => setAlbum(e.target.value)}>\n            <option value=\"\">Select Album</option>\n            {albums.map(album => \n              <option value={album} key={album}>{album}</option>\n            )}\n          </select>\n          <button onClick={() => dispatch(uploadPhotos(files, album))}\n            className={styles.button} disabled={!album || !files.length}>\n            <img src={process.env.PUBLIC_URL + '/upload-icon.png'} width=\"15\" alt=\"Upload Icon\"/> Upload\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from '../../app/store';\nimport photoAPI, { Photo, PhotoListResult } from '../../api/photoAPI';\n\ninterface PhotosState {\n  photosById: Record<string, Photo>;\n  total: number;\n  size: number;\n  selectedIds: string[];\n  isLastPage: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: PhotosState = {\n  photosById: {},\n  total: 0,\n  size: 10,\n  selectedIds: [],\n  isLastPage: true,\n  isLoading: false,\n  error: null,\n}\n\nfunction startLoading(state: PhotosState) {\n  state.isLoading = true;\n}\n\nfunction loadingFailed(state: PhotosState, action: PayloadAction<string>) {\n  state.isLoading = false;\n  state.error = action.payload;\n}\n\nexport const photosSlide = createSlice({\n  name: 'photos',\n  initialState,\n  reducers: {\n    getPhottosStart: startLoading,\n    uploadPhotosStart: startLoading,\n    deletePhotosStart: startLoading,\n    getPhotosSuccess: (state: PhotosState, { payload }: PayloadAction<PhotoListResult>) => {\n      const { documents, count, limit } = payload;\n      state.isLoading = false;\n      state.error = null;\n      documents.forEach(photo => {\n        state.photosById[photo.id] = photo;\n      });\n      state.total = Object.keys(state.photosById).length;\n      state.isLastPage = count < limit;\n    },\n    resetPhotos: (state: PhotosState) => {\n      state.photosById = {};\n    },\n    deletePhotosSuccess: (state: PhotosState, { payload }: PayloadAction<string[]>) => {\n      payload.forEach(id => delete state.photosById[id]);\n      state.selectedIds = [];\n      state.isLoading = false;\n    },\n    getPhottosFailure: loadingFailed,\n    uploadPhotosFailure: loadingFailed,\n    deletePhotosFailure: loadingFailed,\n    setPageSize: (state: PhotosState, { payload }: PayloadAction<number>) => {\n      state.size = payload;\n    },\n    selectPhoto: (state: PhotosState, { payload }: PayloadAction<string>) => {\n      const index = state.selectedIds.indexOf(payload);\n      if (index === -1) {\n        state.selectedIds.push(payload);\n      } else {\n        state.selectedIds.splice(index, 1);\n      }\n    },\n  },\n});\n\nexport const {\n  getPhottosStart,\n  uploadPhotosStart,\n  deletePhotosStart,\n  getPhotosSuccess,\n  deletePhotosSuccess,\n  getPhottosFailure,\n  uploadPhotosFailure,\n  deletePhotosFailure,\n  setPageSize,\n  resetPhotos,\n  selectPhoto,\n} = photosSlide.actions;\n\nexport const fetchPhotos = (offset: number, limit: number, reset = false): AppThunk => async dispatch => {\n  try {\n    dispatch(getPhottosStart());\n    const photosResult = await photoAPI.getPhotos(offset, limit);\n    if (reset) {\n      dispatch(resetPhotos());\n    }\n    dispatch(getPhotosSuccess(photosResult));\n  } catch (err) {\n    dispatch(getPhottosFailure(err.toString()));\n  }\n}\n\nexport const deletePhotos = (\n    selectedIds: string[],\n    photosById: Record<string, Photo>\n  ): AppThunk => async dispatch => {\n  try {\n    dispatch(deletePhotosStart());\n    await photoAPI.deletePhotos(selectedIds, photosById);\n    dispatch(deletePhotosSuccess(selectedIds));\n  } catch (err) {\n    dispatch(deletePhotosFailure(err.toString()));\n  }\n}\n\nexport default photosSlide.reducer;\n","import React, { useEffect } from 'react';\nimport { RootState } from '../../app/store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPhotos, selectPhoto } from './photosSlide';\nimport styles from './Photos.module.css';\n\n\nexport function Photos() {\n  const dispatch = useDispatch();\n  const photos = useSelector((state:RootState) => state.photos);\n\n  useEffect(() => {\n    dispatch(fetchPhotos(0, photos.size, true));\n  }, [dispatch, photos.size]);\n\n  const loadMore = () => {\n    dispatch(fetchPhotos(photos.total, photos.size, false));\n  };\n\n  const getSelectedClass = (photoId: string) => {\n    if (photos.selectedIds.indexOf(photoId) !== -1) {\n      return ` ${styles.selectedPhoto}`;\n    }\n    return '';\n  }\n\n  return (\n    <div className=\"container\">\n      <div className={styles.photos}>\n        {Object.values(photos.photosById).map(photo => \n          <div key={photo.id}\n            className={styles.photo + getSelectedClass(photo.id)}\n            onClick={() => dispatch(selectPhoto(photo.id))}>\n            <div className={styles.photoHolder}>\n              <img src={photo.raw} alt={photo.name} />\n            </div>\n            <div className={styles.photoName}><span>{photo.name}</span></div>\n            <small>{photo.album}</small>\n          </div>  \n        )}\n      </div>\n      {!photos.isLastPage && !photos.isLoading &&\n        <div className=\"load-more text-center\">\n          <button className=\"load-more-btn\" onClick={loadMore}>Load More</button>\n        </div>\n      }\n      {photos.isLoading &&\n        <div className=\"text-center\">\n          <img src={process.env.PUBLIC_URL + '/loading.gif'} width=\"50\" alt=\"loading\" />\n        </div>\n      }\n    </div>\n  );\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from '../../app/store';\nimport photoAPI from '../../api/photoAPI';\n\ninterface HealthState {\n  ok: boolean;\n  isChecking: boolean,\n}\n\nconst initialState: HealthState = {\n  ok: true,\n  isChecking: false,\n}\n\nexport const healCheckSlide = createSlice({\n  name: 'health',\n  initialState,\n  reducers: {\n    healthCheckStart: (state: HealthState) => {\n      state.isChecking = true;\n    },\n    healthCheckSuccess: (state: HealthState) => {\n      state.isChecking = false;\n      state.ok = true;\n    },\n    healthCheckFailure: (state: HealthState, action: PayloadAction<string>) => {\n      state.isChecking = false;\n      state.ok = false;\n    },\n  },\n});\n\nexport const {\n  healthCheckStart,\n  healthCheckSuccess,\n  healthCheckFailure,\n} = healCheckSlide.actions;\n\nexport const healCheck = (): AppThunk => async dispatch => {\n  try {\n    dispatch(healthCheckStart());\n    const message = await photoAPI.healCheck();\n    if (message === 'OK') {\n      dispatch(healthCheckSuccess());\n    } else {\n      dispatch(healthCheckFailure(message));\n    }\n  } catch (err) {\n    dispatch(healthCheckFailure(err.toString()));\n  }\n}\n\nexport default healCheckSlide.reducer;\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { UploadModal } from './features/photos/UploadModal';\r\nimport { Photos } from './features/photos/Photos';\r\nimport { setPageSize, deletePhotos } from './features/photos/photosSlide';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from './app/store';\r\nimport { healCheck } from './features/healthcheck/healcheckSlide';\r\n\r\nfunction App() {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    dispatch(healCheck());\r\n  }, [dispatch]);\r\n\r\n  const photos = useSelector((state: RootState) => state.photos);\r\n  const health = useSelector((state: RootState) => state.health);\r\n\r\n  const changePageSize = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    dispatch(setPageSize(Number(e.target.value)));\r\n  }\r\n\r\n  const handleDeletePhotos = () => {\r\n    const ok = window.confirm('Are you sure you want to delete the selected photos?');\r\n    if (ok) {\r\n      dispatch(deletePhotos(photos.selectedIds, photos.photosById));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {health.ok &&\r\n        <>\r\n        <header className=\"app-header\">\r\n          <h1>Photos</h1>\r\n          <div className=\"actions\">\r\n            {!!photos.selectedIds.length &&\r\n              <>\r\n                <a href=\"#!\" onClick={handleDeletePhotos}>\r\n                  <button>Delete {photos.selectedIds.length} photos</button>\r\n                </a>\r\n                <span>|</span>\r\n              </>\r\n            }\r\n            <a href=\"#!\" onClick={() => setShowModal(true)}>\r\n              <img src={process.env.PUBLIC_URL + '/upload-icon.png'} width=\"20\" alt=\"Upload\"/>\r\n            </a>\r\n            <span>|</span>\r\n            <select onChange={changePageSize} value={photos.size} title=\"Page Size\">\r\n              <option value=\"5\">5</option>\r\n              <option value=\"10\">10</option>\r\n              <option value=\"25\">25</option>\r\n              <option value=\"50\">50</option>\r\n              <option value=\"100\">100</option>\r\n            </select>\r\n          </div>\r\n        </header>\r\n        {showModal &&\r\n          <UploadModal onClose={() => setShowModal(false)}/>\r\n        }\r\n        <Photos/>\r\n        </>\r\n      }\r\n      {!health.ok &&\r\n        <h2 className=\"text-center\">Something went wrong! Please try again later!</h2>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport photosReducer from '../features/photos/photosSlide';\r\nimport uploadReducer from '../features/photos/uploadSlide';\r\nimport healthReducer from '../features/healthcheck/healcheckSlide';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    photos: photosReducer,\r\n    upload: uploadReducer,\r\n    health: healthReducer\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalContent\":\"UploadModal_modalContent__b8enW\",\"modalOverlay\":\"UploadModal_modalOverlay__1qM5G\",\"modalHeader\":\"UploadModal_modalHeader__10kvO\",\"modalFooter\":\"UploadModal_modalFooter__7fNIf\",\"dropzone\":\"UploadModal_dropzone__2wd05\",\"button\":\"UploadModal_button__2gmAi\",\"removeFile\":\"UploadModal_removeFile__PFdyX\",\"progress\":\"UploadModal_progress__19HHn\",\"percentage\":\"UploadModal_percentage__1PQst\"};"],"sourceRoot":""}